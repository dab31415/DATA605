}
}
}
}
return (list(L=L,U=U))
}
A <- matrix(c(1,2,3,1,1,1,2,0,1),nrow=3)
L,U = LU(A,TRUE)
LU <- function(A, debug=FALSE) {
if (nrow(A) != ncol(A)) {
return ("A is not square")
}
n <- ncol(A)
U <- A
L <- diag(n)
for (col in c(1:(n-1))) {
if (U[col,col] == 0) {
if (debug) {
print(sprintf("needs row swap in col %s U=",col))
print(U)
}
needs_row_swap <- TRUE
for (row in c((col+1):(n))) {
if (needs_row_swap & (U[row,col] != 0)) {
E <- diag(n)
E[col,col] <- 0
E[row,row] <- 0
E[col,row] <- 1
E[row,col] <- 1
U <- E %*% U
L <- L %*% solve(E)
needs_row_swap <- FALSE
if (debug) {
print(sprintf("row swap complete with row %s U=",row))
print(U)
}
}
}
}
if (U[col,col] != 0) {
for (row in c((col+1):n)) {
E <- diag(n)
E[row,col] <- -1 * U[row,col] / U[col,col]
if (debug) {
print(sprintf("elminating row %s col %s E=",row,col))
print(E)
}
U <- E %*% U
L <- L %*% solve(E)
if (debug) {
print("U=")
print(U)
}
}
}
}
return (list(L=L,U=U))
}
A <- matrix(c(1,2,3,1,1,1,2,0,1),nrow=3)
r = LU(A,TRUE)
print("L=")
print(r[1])
print("U=")
print(r[2])
r[1] %*% r[2] == A
LU <- function(A, debug=FALSE) {
if (nrow(A) != ncol(A)) {
return ("A is not square")
}
n <- ncol(A)
U <- A
L <- diag(n)
for (col in c(1:(n-1))) {
if (U[col,col] == 0) {
if (debug) {
print(sprintf("needs row swap in col %s U=",col))
print(U)
}
needs_row_swap <- TRUE
for (row in c((col+1):(n))) {
if (needs_row_swap & (U[row,col] != 0)) {
E <- diag(n)
E[col,col] <- 0
E[row,row] <- 0
E[col,row] <- 1
E[row,col] <- 1
U <- E %*% U
L <- L %*% solve(E)
needs_row_swap <- FALSE
if (debug) {
print(sprintf("row swap complete with row %s U=",row))
print(U)
}
}
}
}
if (U[col,col] != 0) {
for (row in c((col+1):n)) {
E <- diag(n)
E[row,col] <- -1 * U[row,col] / U[col,col]
if (debug) {
print(sprintf("elminating row %s col %s E=",row,col))
print(E)
}
U <- E %*% U
L <- L %*% solve(E)
if (debug) {
print("U=")
print(U)
}
}
}
}
return (list(L=L,U=U))
}
A <- matrix(c(1,2,3,1,1,1,2,0,1),nrow=3)
r = LU(A,TRUE)
print("L=")
print(r[1])
print("U=")
print(r[2])
r.L %*% r.U == A
LU <- function(A, debug=FALSE) {
if (nrow(A) != ncol(A)) {
return ("A is not square")
}
n <- ncol(A)
U <- A
L <- diag(n)
for (col in c(1:(n-1))) {
if (U[col,col] == 0) {
if (debug) {
print(sprintf("needs row swap in col %s U=",col))
print(U)
}
needs_row_swap <- TRUE
for (row in c((col+1):(n))) {
if (needs_row_swap & (U[row,col] != 0)) {
E <- diag(n)
E[col,col] <- 0
E[row,row] <- 0
E[col,row] <- 1
E[row,col] <- 1
U <- E %*% U
L <- L %*% solve(E)
needs_row_swap <- FALSE
if (debug) {
print(sprintf("row swap complete with row %s U=",row))
print(U)
}
}
}
}
if (U[col,col] != 0) {
for (row in c((col+1):n)) {
E <- diag(n)
E[row,col] <- -1 * U[row,col] / U[col,col]
if (debug) {
print(sprintf("elminating row %s col %s E=",row,col))
print(E)
}
U <- E %*% U
L <- L %*% solve(E)
if (debug) {
print("U=")
print(U)
}
}
}
}
return (list(L=L,U=U))
}
A <- matrix(c(1,2,3,1,1,1,2,0,1),nrow=3)
r = LU(A,TRUE)
print("L=")
print(r[1])
print("U=")
print(r[2])
r[1]$L %*% r[2]$U == A
print(r[2])
LU <- function(A, debug=FALSE) {
if (nrow(A) != ncol(A)) {
return ("A is not square")
}
n <- ncol(A)
U <- A
L <- diag(n)
for (col in c(1:(n-1))) {
if (U[col,col] == 0) {
if (debug) {
print(sprintf("needs row swap in col %s U=",col))
print(U)
}
needs_row_swap <- TRUE
for (row in c((col+1):(n))) {
if (needs_row_swap & (U[row,col] != 0)) {
E <- diag(n)
E[col,col] <- 0
E[row,row] <- 0
E[col,row] <- 1
E[row,col] <- 1
U <- E %*% U
L <- L %*% solve(E)
needs_row_swap <- FALSE
if (debug) {
print(sprintf("row swap complete with row %s U=",row))
print(U)
}
}
}
}
if (U[col,col] != 0) {
for (row in c((col+1):n)) {
E <- diag(n)
E[row,col] <- -1 * U[row,col] / U[col,col]
if (debug) {
print(sprintf("elminating row %s col %s E=",row,col))
print(E)
}
U <- E %*% U
L <- L %*% solve(E)
if (debug) {
print("U=")
print(U)
}
}
}
}
return (list(L=L,U=U))
}
A <- matrix(c(0,2,3,1,1,1,2,0,1),nrow=3)
r = LU(A,TRUE)
print(r[1])
print(r[2])
r[1]$L %*% r[2]$U == A
LU <- function(A, debug=FALSE) {
if (nrow(A) != ncol(A)) {
return ("A is not square")
}
n <- ncol(A)
U <- A
L <- diag(n)
for (col in c(1:(n-1))) {
if (U[col,col] == 0) {
if (debug) {
print(sprintf("needs row swap in col %s U=",col))
print(U)
}
needs_row_swap <- TRUE
for (row in c((col+1):(n))) {
if (needs_row_swap & (U[row,col] != 0)) {
E <- diag(n)
E[col,col] <- 0
E[row,row] <- 0
E[col,row] <- 1
E[row,col] <- 1
U <- E %*% U
L <- L %*% solve(E)
needs_row_swap <- FALSE
if (debug) {
print(sprintf("row swap complete with row %s U=",row))
print(U)
}
}
}
}
if (U[col,col] != 0) {
for (row in c((col+1):n)) {
if (U[row,col] == 0) {
if (debug) {
print(sprintf("eliminating row %s col %s is not needed",row,col))
print("U=")
print(U)
}
} else {
E <- diag(n)
E[row,col] <- -1 * U[row,col] / U[col,col]
if (debug) {
print(sprintf("elminating row %s col %s E=",row,col))
print(E)
}
U <- E %*% U
L <- L %*% solve(E)
if (debug) {
print("U=")
print(U)
}
}
}
}
}
return (list(L=L,U=U))
}
A <- matrix(c(0,2,3,1,1,1,2,0,1),nrow=3)
r = LU(A,TRUE)
print(r[1])
print(r[2])
r[1]$L %*% r[2]$U == A
LU <- function(A, debug=FALSE) {
if (nrow(A) != ncol(A)) {
return ("A is not square")
}
n <- ncol(A)
U <- A
L <- diag(n)
for (col in c(1:(n-1))) {
if (U[col,col] == 0) {
if (debug) {
print(sprintf("needs row swap in col %s U=",col))
print(U)
}
#needs_row_swap <- TRUE
for (row in c((col+1):(n))) {
#if (needs_row_swap & (U[row,col] != 0)) {
if (U[row,col] != 0) {
E <- diag(n)
E[col,col] <- 0
E[row,row] <- 0
E[col,row] <- 1
E[row,col] <- 1
U <- E %*% U
L <- L %*% solve(E)
#needs_row_swap <- FALSE
if (debug) {
print(sprintf("row swap complete with row %s U=",row))
print(U)
}
break # break from the row swap loop
}
}
}
if (U[col,col] != 0) {
for (row in c((col+1):n)) {
if (U[row,col] == 0) {
if (debug) {
print(sprintf("eliminating row %s col %s is not needed",row,col))
print("U=")
print(U)
}
} else {
E <- diag(n)
E[row,col] <- -1 * U[row,col] / U[col,col]
if (debug) {
print(sprintf("elminating row %s col %s E=",row,col))
print(E)
}
U <- E %*% U
L <- L %*% solve(E)
if (debug) {
print("U=")
print(U)
}
}
}
}
}
return (list(L=L,U=U))
}
A <- matrix(c(0,2,3,1,1,1,2,0,1),nrow=3)
r = LU(A,TRUE)
print(r[1])
print(r[2])
r[1]$L %*% r[2]$U == A
LU <- function(A, debug=FALSE) {
if (nrow(A) != ncol(A)) {
return ("A is not square")
}
n <- ncol(A)
U <- A
L <- diag(n)
for (col in c(1:(n-1))) {
if (U[col,col] == 0) {
if (debug) {
print(sprintf("needs row swap in col %s U=",col))
print(U)
}
for (row in c((col+1):(n))) {
if (U[row,col] != 0) {
E <- diag(n)
E[col,col] <- 0
E[row,row] <- 0
E[col,row] <- 1
E[row,col] <- 1
U <- E %*% U
L <- L %*% solve(E)
if (debug) {
print(sprintf("row swap complete with row %s U=",row))
print(U)
}
break # break from the row swap loop
}
}
}
if (U[col,col] != 0) {
for (row in c((col+1):n)) {
if (U[row,col] == 0) {
if (debug) {
print(sprintf("eliminating row %s col %s is not needed",row,col))
print("U=")
print(U)
}
} else {
E <- diag(n)
E[row,col] <- -1 * U[row,col] / U[col,col]
if (debug) {
print(sprintf("elminating row %s col %s E=",row,col))
print(E)
}
U <- E %*% U
L <- L %*% solve(E)
if (debug) {
print("U=")
print(U)
}
}
}
} else {
if (debug) {
print(sprintf("entire col %s is 0 U=",col))
print(U)
}
}
}
return (list(L=L,U=U))
}
A <- matrix(c(0,2,3,1,1,1,2,0,1),nrow=3)
r = LU(A,TRUE)
print(r[1])
print(r[2])
r[1]$L %*% r[2]$U == A
LU <- function(A, debug=FALSE) {
if (nrow(A) != ncol(A)) {
return ("A is not square")
}
n <- ncol(A)
U <- A
L <- diag(n)
for (col in c(1:(n-1))) {
if (U[col,col] == 0) {
if (debug) {
print(sprintf("needs row swap in col %s U=",col))
print(U)
}
for (row in c((col+1):(n))) {
if (U[row,col] != 0) {
E <- diag(n)
E[col,col] <- 0
E[row,row] <- 0
E[col,row] <- 1
E[row,col] <- 1
U <- E %*% U
L <- L %*% solve(E)
if (debug) {
print(sprintf("row swap complete with row %s U=",row))
print(U)
}
break # break from the row swap loop
}
}
}
if (U[col,col] != 0) {
for (row in c((col+1):n)) {
if (U[row,col] == 0) {
if (debug) {
print(sprintf("eliminating row %s col %s is not needed",row,col))
print("U=")
print(U)
}
} else {
E <- diag(n)
E[row,col] <- -1 * U[row,col] / U[col,col]
if (debug) {
print(sprintf("elminating row %s col %s E=",row,col))
print(E)
}
U <- E %*% U
L <- L %*% solve(E)
if (debug) {
print("U=")
print(U)
}
}
}
} else {
if (debug) {
print(sprintf("entire col %s is 0 U=",col))
print(U)
}
}
}
return (list(L=L,U=U))
}
A <- matrix(c(0,0,0,1,1,1,2,0,1),nrow=3)
r = LU(A,TRUE)
print(r[1])
print(r[2])
r[1]$L %*% r[2]$U == A
A <- matrix(c(0,2,3,1,1,1,2,0,1),nrow=3)
r = LU(A)
print(r[1])
print(r[2])
r[1]$L %*% r[2]$U == A
A <- matrix(c(1,2,3,4,2,4,3,1,3,2,1,4,4,2,1,3),nrow=4)
r = LU(A)
print(r[1])
print(r[2])
r[1]$L %*% r[2]$U == A
A <- matrix(c(1,2,3,1,1,1,2,0,1),nrow=3)
r = LU(A)
print(r[1])
print(r[2])
r[1]$L %*% r[2]$U == A
